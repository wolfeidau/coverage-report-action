package cobertura

import (
	"fmt"
	"io"
	"strconv"
	"text/template"

	"github.com/dustin/go-humanize"
	"github.com/rs/zerolog/log"
)

// Footer footer used for all comments
const Footer = "Generated by https://github.com/wolfeidau/coverage-report-action"

var reportTemplate = `
![coverage](https://img.shields.io/badge/coverage%20total-{{.Report.LineRate | humanizePercentage}}%25-{{.Report.LineRate | badgeColor}}?style=for-the-badge)

{{- $showFiles := .ShowFiles}}

| Package/File | Coverage of Lines | Threshold ({{.Threshold}}%) |
| ------------- | ------------- | ------------- |
| **Total** | {{.Report.LineRate | humanizePercentage}}% | {{.Report.LineRate | thresholdEmoji}} |
{{- range .Report.Packages.Package }}
{{- if .Name }}{{/* check if the package name is set, this may not be the case for Jest/JS reports */}}
| {{ .Name }} | {{.LineRate | humanizePercentage}}% | {{.LineRate | thresholdEmoji}} |
{{- end }}
{{- if $showFiles }}
{{- range .Classes.Class }}
| {{.Name | indentFile}}{{ .Filename }} | {{.LineRate | humanizePercentage}}% | {{.LineRate | thresholdEmoji}} |
{{- end }}
{{- end }}
{{- end }}

Generated by https://github.com/wolfeidau/coverage-report-action
`

// RunTemplate run the report template
func RunTemplate(wr io.Writer, cr *CoverageReport, minimumCoverage int, showFiles bool) error {
	funcMap := template.FuncMap{
		// The name "title" is what the function will be called in the template text.
		"humanizePercentage": humanizePercentage,
		"badgeColor":         thresholdString(minimumCoverage, "green", "red"),
		"thresholdEmoji":     thresholdString(minimumCoverage, "✅", "❌"),
		"indentFile":         indentFile,
	}

	tmpl, err := template.New("test").Funcs(funcMap).Parse(reportTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse report template: %w", err)
	}

	err = tmpl.Execute(wr, &TemplateData{Threshold: minimumCoverage, Report: cr, ShowFiles: showFiles})
	if err != nil {
		return fmt.Errorf("failed to execute report template: %w", err)
	}

	return nil
}

func humanizePercentage(val string) string {
	ft, err := strconv.ParseFloat(val, 64)
	if err != nil {
		log.Fatal().Msg("failed to read float")
	}

	return humanize.FormatFloat("###.##", ft*100)
}

func indentFile(val string) string {
	if val != "" {
		return "  "
	}

	return ""
}

func thresholdString(minCoverage int, success, failure string) func(val string) string {
	return func(val string) string {

		ft, err := strconv.ParseFloat(val, 64)
		if err != nil {
			log.Fatal().Msg("failed to read float")
		}

		if int(ft*100) < minCoverage {
			return failure
		}

		return success
	}
}

// TemplateData wrap the report in a struct with the param settings at the top level
type TemplateData struct {
	Threshold int
	ShowFiles bool
	Report    *CoverageReport
}
